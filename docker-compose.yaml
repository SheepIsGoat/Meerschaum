version: "3.8"
services:
  meerschaum_db:
    environment:
      - TIMESCALEDB_TELEMETRY=off
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    image: "timescale/timescaledb:${TIMESCALEDB_VERSION}"
    ports:
      - "5432:5432"
    hostname: "${MEERSCHAUM_DB_HOSTNAME}"
    volumes:
      - meerschaum_db_data:/var/lib/postgresql/data
    networks:
      - backend
    # deploy:
      # placement:
        # max_replicas_per_node: 1
        # constraints:
          # - "node.role==manager"

  # redis:
    # image: redis
    # ports:
      # - "6379"
    # networks:
      # - frontend
    # deploy:
      # replicas: 2
      # update_config:
        # parallelism: 2
        # delay: 10s
      # restart_policy:
        # condition: on-failure

  grafana:
    image: "grafana/grafana:latest"
    ports:
      - "3000:3000"
    networks:
      - frontend
    volumes:
      - grafana-storage:/var/lib/grafana

  meerschaum_api:
    image: "bmeares/meerschaum:latest"
    ports:
      - "8000:8000"
    hostname: "meerschaum_api"
    networks:
      - frontend
      - backend
    command: "api -c '{\"meerschaum\":{\"connectors\":{\"sql\":{\"meta\":{\"host\":\"${MEERSCHAUM_DB_HOSTNAME}\"}}}}}'"
    depends_on:
      - meerschaum_db
    # volumes:
      # - meerschaum_config:${MEERSCHAUM_CONFIG_RESOURCES}

networks:
  frontend:
  backend:

volumes:
  meerschaum_db_data:
  grafana-storage:
  # meerschaum_config:
