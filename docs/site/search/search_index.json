{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Meerschaum! \u00b6 Here you can find usage information, helpful guides, and tutorials. Info First time using Meerschaum? Check out the Getting Started page on how to get Meerschaum running in no time. If you'd like to incorporate Meerschaum into your project, head over to docs.meerschaum.io for technical API documentation of the meerschaum package. Links \u00b6 Documentation Community Getting Started GitHub Discussions Python documentation Discord API documentation Subreddit Support Meerschaum's Development \u00b6 I'm a full-time graduate student, and I work on Meerschaum in my free time. If you enjoy Meerschaum and want to support its development, you can buy me a beer (or coffee) .","title":"Home"},{"location":"#welcome-to-meerschaum","text":"Here you can find usage information, helpful guides, and tutorials. Info First time using Meerschaum? Check out the Getting Started page on how to get Meerschaum running in no time. If you'd like to incorporate Meerschaum into your project, head over to docs.meerschaum.io for technical API documentation of the meerschaum package.","title":"Welcome to Meerschaum!"},{"location":"#links","text":"Documentation Community Getting Started GitHub Discussions Python documentation Discord API documentation Subreddit","title":"Links"},{"location":"#support-meerschaums-development","text":"I'm a full-time graduate student, and I work on Meerschaum in my free time. If you enjoy Meerschaum and want to support its development, you can buy me a beer (or coffee) .","title":"Support Meerschaum's Development"},{"location":"get-started/","text":"Quick Start \u00b6 Meerschaum is customizable to best fit your situation, but if you're starting from scratch, the defaults work just fine. Read the guide below and follow the steps to install and use Meerschaum. Step 1: Requirements \u00b6 To install Meerschaum, you need will need Python 3.7+ with pip installed. Step 1.5: Server Stack Requirements \u00b6 Meerschaum comes with the stack command which leverages Docker Compose to create all the necessary services in a full-stack Meerschaum installation \u2015 services such as a database instance, API server, pre-configured Grafana instance, MQTT broker, and more. The stack is only needed for back-end server installations and is optional, so you can skip this step for any of the following reasons: You want a minimal install with SQLite instead of a dedicated database like TimescaleDB. You don't want to / can't install Docker. You can install and run Meerschaum without any elevated privileges. More info on running unprivileged Meerschaum here . You only need to use Meerschaum as a client for an existing Meerschaum instance. If you plan on running the default, pre-configured Meerschaum database, make sure you have Docker installed. Docker is used for the stack command, so if you have another database, you can skip installing Docker. If you are running Linux, search your repositories for docker.io or run this script: 1 curl https://get.docker.com | sh If you're on Windows or MacOS, install Docker Desktop . Step 2: Installation \u00b6 Install Meerschaum from PyPI : Tip Meerschaum will auto-install packages in as you use them (into a virtual environment, to preserve your base environment). If you'd rather install all of its dependencies at installation, you can request the full version: 1 python -m pip install --upgrade meerschaum [ full ] That's it! You've got Meerschaum installed. Continue below for information on bringing up a stack and creating your first pipes. Step 3: Starting the Stack \u00b6 To bring up the stack, run the following command: 1 mrsm stack up [ -d ] The stack command is an alias for docker-compose , and any flags passed to docker-compose are wrapped in brackets (e.g. [-d] ). If you want to stop all the services in the stack, run the stack command with down : 1 mrsm stack down","title":"Installation and Setup"},{"location":"get-started/#quick-start","text":"Meerschaum is customizable to best fit your situation, but if you're starting from scratch, the defaults work just fine. Read the guide below and follow the steps to install and use Meerschaum.","title":"Quick Start"},{"location":"get-started/#step-1-requirements","text":"To install Meerschaum, you need will need Python 3.7+ with pip installed.","title":"Step 1: Requirements"},{"location":"get-started/#step-15-server-stack-requirements","text":"Meerschaum comes with the stack command which leverages Docker Compose to create all the necessary services in a full-stack Meerschaum installation \u2015 services such as a database instance, API server, pre-configured Grafana instance, MQTT broker, and more. The stack is only needed for back-end server installations and is optional, so you can skip this step for any of the following reasons: You want a minimal install with SQLite instead of a dedicated database like TimescaleDB. You don't want to / can't install Docker. You can install and run Meerschaum without any elevated privileges. More info on running unprivileged Meerschaum here . You only need to use Meerschaum as a client for an existing Meerschaum instance. If you plan on running the default, pre-configured Meerschaum database, make sure you have Docker installed. Docker is used for the stack command, so if you have another database, you can skip installing Docker. If you are running Linux, search your repositories for docker.io or run this script: 1 curl https://get.docker.com | sh If you're on Windows or MacOS, install Docker Desktop .","title":"Step 1.5: Server Stack Requirements"},{"location":"get-started/#step-2-installation","text":"Install Meerschaum from PyPI : Tip Meerschaum will auto-install packages in as you use them (into a virtual environment, to preserve your base environment). If you'd rather install all of its dependencies at installation, you can request the full version: 1 python -m pip install --upgrade meerschaum [ full ] That's it! You've got Meerschaum installed. Continue below for information on bringing up a stack and creating your first pipes.","title":"Step 2: Installation"},{"location":"get-started/#step-3-starting-the-stack","text":"To bring up the stack, run the following command: 1 mrsm stack up [ -d ] The stack command is an alias for docker-compose , and any flags passed to docker-compose are wrapped in brackets (e.g. [-d] ). If you want to stop all the services in the stack, run the stack command with down : 1 mrsm stack down","title":"Step 3: Starting the Stack"},{"location":"get-started/bootstrapping-a-pipe/","text":"Bootstrap a Pipe \u00b6","title":"Bootstrap a Pipe"},{"location":"get-started/bootstrapping-a-pipe/#bootstrap-a-pipe","text":"","title":"Bootstrap a Pipe"},{"location":"old_README/old_README/","text":"Version Status Miscellaneous Build Pipes with Meerschaum \u00b6 Meerschaum is a platform for quickly creating and managing time-series data streams called Pipes. With Meerschaum, you can have a data visualization stack running in minutes. Please visit https://meerschaum.io for setup, usage, and troubleshooting information. You can read a brief overview of the project below. Version Status Miscellaneous Table of Contents \u00b6 Disclaimer Setup Requirements Installation Quickstart Create Visualizations with Grafana FAQ What are Pipes, exactly? I broke my configuration. How do I start over? I can't open the Meerschaum shell! Connectors don't work for <database flavor> ! Thank you Disclaimer \u00b6 Meerschaum is undergoing active development and is still a beta release. Expect to encounter bugs, and please open issues when you find them! Meerschaum is distributed with no warranty, so use with care! Meerschaum was built using powerful open source software like TimescaleDB, Grafana, pandas, and more. Check the Thank You section below for more information about dependencies. Setup \u00b6 Requirements \u00b6 To install Meerschaum, you need will pip installed. To access the full feature set of Meerschaum, make sure you have Docker installed. If you are running Linux, search your repositories for docker.io or run this script: 1 curl https://get.docker.com | sh If you're on Windows or MacOS, install Docker Desktop . Installation \u00b6 To install the full version of Meerschaum, install with pip : 1 pip install meerschaum [ full ] Quickstart \u00b6 Launch the Meerschaum Shell \u00b6 To jump into the mrsm shell, run the command: 1 mrsm All standard actions can either be executed from within the mrsm shell or on the command line directly. For example, the command 1 $ mrsm show version is equivalent to 1 2 $ mrsm > show version Start the Stack \u00b6 To start the Meerschaum stack in the background (using docker-compose -d ), run the command 1 mrsm stack [ -d ] Add a Connector \u00b6 If you want to create a Pipe for remote data, you first need to define a Connector. Run this command to open the configuration YAML file with your text editor: 1 mrsm edit config For this example, let's add a connector called exampledb . Add a new entry under the sql section: 1 2 3 4 5 6 7 8 9 meerschaum : connectors : sql : exampledb : username : myuser password : mypass flavor : postgresql host : myserverhostname database : mydb Note that for sqlite connectors, only the database parameter is needed (path to the .sqlite file). Register a Pipe \u00b6 Pipes are defined by three keys: 1. Connection (keys for a connector in the format type:label ; e.g. sql:exampledb for the Connector added above) 2. Metric (label for the contents of the Pipe's data, such as power or temperature ) 3. Location (optional; None if omitted) To register a Pipe, run this command: 1 mrsm register pipes -c sql:exampledb -m mydata This will create a Pipe with the connector we added above ( sql:exampledb ) and the metric mydata . The location for this Pipe is None . Next, we need to edit the parameters for this pipe. Run this command to open your text editor: 1 mrsm edit pipes -c sql:exampledb -m mydata For this example, edit the YAML file to look something like this: 1 2 3 4 5 columns : datetime : mydtcolumn id : myidcolumn fetch : definition : SELECT * FROM mytable This information describes the remote dataset we will add into the Pipe. The columns defined will be indexed, and the definition is executed on the remote server to get the data. Add Data to a Pipe \u00b6 If you defined the parameters described above, just run the command below to fetch new data and sync the Pipe: 1 mrsm sync pipes If you want to add an existing dataframe to a Pipe, run pipe.sync(df) to append the dataframe to the Pipe's table. You can launch into a Python shell with mrsm python : 1 2 3 4 5 6 7 8 9 10 11 >>> import meerschaum as mrsm >>> pipe = mrsm . Pipe ( 'sql:exampledb' , 'mydata' ) >>> >>> ### if pipe has not been registered, you can define columns here >>> if not pipe . columns : >>> pipe . columns = { 'datetime' : 'mydtcolumn' , 'id' : 'myidcolumn' } >>> >>> import pandas as pd >>> df = pd . read_csv ( 'mydata.csv' ) >>> >>> pipe . sync ( df ) In this case, the Pipe has created and indexed the table sql_exampledb_mydata on the Meerschaum TimescaleDB database. Create Visualizations with Grafana \u00b6 Grafana is included in the Meerschaum stack, pre-configured with the Meerschaum TimescaleDB database. Open a web browser and navigate to http://localhost:3000 and log in to Grafana with username admin , password admin . FAQ \u00b6 What are Pipes, exactly? \u00b6 Pipes are built from TimescaleDB Hypertables , which are PostgreSQL tables with special datetime indexing and functions. In future releases of Meerschaum, Pipes may be created from continous aggregate views . I broke my configuration. How do I start over? \u00b6 The command to reset your configuration files is: 1 bootstrap config If that doesn't work, just remove the folder ~/.config/meerschaum ( %AppData%/Meerschaum on Windows). To completely remove the stack and its data, run this command: 1 stack down [-v] which is equivalent to docker-compose down -v . I can't open the Meerschaum shell! \u00b6 You can invoke mrsm directly with python -m meerschaum . Check that your PATH includes packages installed by pip , such as ~/.local/bin . How do I turn off the emoji / colors / I'm running Windows? \u00b6 Open the configuration file with mrsm edit config and search for the key formatting under the system section. From there, you can turn off emoji ( unicode: false ) or colors ( ansi: false ). Connectors don't work for <database flavor> ! \u00b6 Although Connectors should work with any database flavor supported by sqlalchemy Engines, it is difficult to test against many database flavors. When bugs are encountered, please open an issue and describe your configuration! As of now, there is (limited) support for the following database flavors: - PostgreSQL / TimescaleDB - MySQL / MariaDB - MSSQL - Oracle SQL (limited support, testing needed) - SQLite Thank you \u00b6 I want to give my sincere thanks to the developers of the following projects: - Docker - Pandas - SQLAlchemy - FastAPI - Uvicorn - pprintpp - CascaDict - pyvim - Colorama - more_termcolor - SQL CLI Tools - rich -","title":"old README"},{"location":"old_README/old_README/#build-pipes-with-meerschaum","text":"Meerschaum is a platform for quickly creating and managing time-series data streams called Pipes. With Meerschaum, you can have a data visualization stack running in minutes. Please visit https://meerschaum.io for setup, usage, and troubleshooting information. You can read a brief overview of the project below. Version Status Miscellaneous","title":"Build Pipes with Meerschaum"},{"location":"old_README/old_README/#table-of-contents","text":"Disclaimer Setup Requirements Installation Quickstart Create Visualizations with Grafana FAQ What are Pipes, exactly? I broke my configuration. How do I start over? I can't open the Meerschaum shell! Connectors don't work for <database flavor> ! Thank you","title":"Table of Contents"},{"location":"old_README/old_README/#disclaimer","text":"Meerschaum is undergoing active development and is still a beta release. Expect to encounter bugs, and please open issues when you find them! Meerschaum is distributed with no warranty, so use with care! Meerschaum was built using powerful open source software like TimescaleDB, Grafana, pandas, and more. Check the Thank You section below for more information about dependencies.","title":"Disclaimer"},{"location":"old_README/old_README/#setup","text":"","title":"Setup"},{"location":"old_README/old_README/#requirements","text":"To install Meerschaum, you need will pip installed. To access the full feature set of Meerschaum, make sure you have Docker installed. If you are running Linux, search your repositories for docker.io or run this script: 1 curl https://get.docker.com | sh If you're on Windows or MacOS, install Docker Desktop .","title":"Requirements"},{"location":"old_README/old_README/#installation","text":"To install the full version of Meerschaum, install with pip : 1 pip install meerschaum [ full ]","title":"Installation"},{"location":"old_README/old_README/#quickstart","text":"","title":"Quickstart"},{"location":"old_README/old_README/#launch-the-meerschaum-shell","text":"To jump into the mrsm shell, run the command: 1 mrsm All standard actions can either be executed from within the mrsm shell or on the command line directly. For example, the command 1 $ mrsm show version is equivalent to 1 2 $ mrsm > show version","title":"Launch the Meerschaum Shell"},{"location":"old_README/old_README/#start-the-stack","text":"To start the Meerschaum stack in the background (using docker-compose -d ), run the command 1 mrsm stack [ -d ]","title":"Start the Stack"},{"location":"old_README/old_README/#add-a-connector","text":"If you want to create a Pipe for remote data, you first need to define a Connector. Run this command to open the configuration YAML file with your text editor: 1 mrsm edit config For this example, let's add a connector called exampledb . Add a new entry under the sql section: 1 2 3 4 5 6 7 8 9 meerschaum : connectors : sql : exampledb : username : myuser password : mypass flavor : postgresql host : myserverhostname database : mydb Note that for sqlite connectors, only the database parameter is needed (path to the .sqlite file).","title":"Add a Connector"},{"location":"old_README/old_README/#register-a-pipe","text":"Pipes are defined by three keys: 1. Connection (keys for a connector in the format type:label ; e.g. sql:exampledb for the Connector added above) 2. Metric (label for the contents of the Pipe's data, such as power or temperature ) 3. Location (optional; None if omitted) To register a Pipe, run this command: 1 mrsm register pipes -c sql:exampledb -m mydata This will create a Pipe with the connector we added above ( sql:exampledb ) and the metric mydata . The location for this Pipe is None . Next, we need to edit the parameters for this pipe. Run this command to open your text editor: 1 mrsm edit pipes -c sql:exampledb -m mydata For this example, edit the YAML file to look something like this: 1 2 3 4 5 columns : datetime : mydtcolumn id : myidcolumn fetch : definition : SELECT * FROM mytable This information describes the remote dataset we will add into the Pipe. The columns defined will be indexed, and the definition is executed on the remote server to get the data.","title":"Register a Pipe"},{"location":"old_README/old_README/#add-data-to-a-pipe","text":"If you defined the parameters described above, just run the command below to fetch new data and sync the Pipe: 1 mrsm sync pipes If you want to add an existing dataframe to a Pipe, run pipe.sync(df) to append the dataframe to the Pipe's table. You can launch into a Python shell with mrsm python : 1 2 3 4 5 6 7 8 9 10 11 >>> import meerschaum as mrsm >>> pipe = mrsm . Pipe ( 'sql:exampledb' , 'mydata' ) >>> >>> ### if pipe has not been registered, you can define columns here >>> if not pipe . columns : >>> pipe . columns = { 'datetime' : 'mydtcolumn' , 'id' : 'myidcolumn' } >>> >>> import pandas as pd >>> df = pd . read_csv ( 'mydata.csv' ) >>> >>> pipe . sync ( df ) In this case, the Pipe has created and indexed the table sql_exampledb_mydata on the Meerschaum TimescaleDB database.","title":"Add Data to a Pipe"},{"location":"old_README/old_README/#create-visualizations-with-grafana","text":"Grafana is included in the Meerschaum stack, pre-configured with the Meerschaum TimescaleDB database. Open a web browser and navigate to http://localhost:3000 and log in to Grafana with username admin , password admin .","title":"Create Visualizations with Grafana"},{"location":"old_README/old_README/#faq","text":"","title":"FAQ"},{"location":"old_README/old_README/#what-are-pipes-exactly","text":"Pipes are built from TimescaleDB Hypertables , which are PostgreSQL tables with special datetime indexing and functions. In future releases of Meerschaum, Pipes may be created from continous aggregate views .","title":"What are Pipes, exactly?"},{"location":"old_README/old_README/#i-broke-my-configuration-how-do-i-start-over","text":"The command to reset your configuration files is: 1 bootstrap config If that doesn't work, just remove the folder ~/.config/meerschaum ( %AppData%/Meerschaum on Windows). To completely remove the stack and its data, run this command: 1 stack down [-v] which is equivalent to docker-compose down -v .","title":"I broke my configuration. How do I start over?"},{"location":"old_README/old_README/#i-cant-open-the-meerschaum-shell","text":"You can invoke mrsm directly with python -m meerschaum . Check that your PATH includes packages installed by pip , such as ~/.local/bin .","title":"I can't open the Meerschaum shell!"},{"location":"old_README/old_README/#how-do-i-turn-off-the-emoji--colors--im-running-windows","text":"Open the configuration file with mrsm edit config and search for the key formatting under the system section. From there, you can turn off emoji ( unicode: false ) or colors ( ansi: false ).","title":"How do I turn off the emoji / colors / I'm running Windows?"},{"location":"old_README/old_README/#connectors-dont-work-for-database-flavor","text":"Although Connectors should work with any database flavor supported by sqlalchemy Engines, it is difficult to test against many database flavors. When bugs are encountered, please open an issue and describe your configuration! As of now, there is (limited) support for the following database flavors: - PostgreSQL / TimescaleDB - MySQL / MariaDB - MSSQL - Oracle SQL (limited support, testing needed) - SQLite","title":"Connectors don't work for &lt;database flavor&gt;!"},{"location":"old_README/old_README/#thank-you","text":"I want to give my sincere thanks to the developers of the following projects: - Docker - Pandas - SQLAlchemy - FastAPI - Uvicorn - pprintpp - CascaDict - pyvim - Colorama - more_termcolor - SQL CLI Tools - rich -","title":"Thank you"},{"location":"plugins/","text":"Installing and Using Plugins \u00b6 Meerschaum gives you the ability to easily install and create plugins. Reference the guide below on how to install, write, and publish plugins. Installing Plugins \u00b6 To install plugins, run the install plugins command: 1 mrsm install plugins testing Any Meerschaum API instance can act as a Meerschaum repository, and the default repository is the public mrsm.io repository. To change your default repository: Open your configuration file with edit config . 1 mrsm edit config Change value of meerschaum:default_repository to the Connector Keys of your repository. 1 2 meerschaum : default_repository : api:myrepo Using Plugins \u00b6 How you use a plugin depends on whether it's a","title":"Installing and Using Plugins"},{"location":"plugins/#installing-and-using-plugins","text":"Meerschaum gives you the ability to easily install and create plugins. Reference the guide below on how to install, write, and publish plugins.","title":"Installing and Using Plugins"},{"location":"plugins/#installing-plugins","text":"To install plugins, run the install plugins command: 1 mrsm install plugins testing Any Meerschaum API instance can act as a Meerschaum repository, and the default repository is the public mrsm.io repository. To change your default repository: Open your configuration file with edit config . 1 mrsm edit config Change value of meerschaum:default_repository to the Connector Keys of your repository. 1 2 meerschaum : default_repository : api:myrepo","title":"Installing Plugins"},{"location":"plugins/#using-plugins","text":"How you use a plugin depends on whether it's a","title":"Using Plugins"},{"location":"plugins/types-of-plugins/","text":"Types of Plugins \u00b6 Meerschaum plugins either provide data or do actions . Data plugins retrieve and parse data, then pass it on to Meerschaum for later analysis. There are two types of data plugins: fetch and sync plugins. Action plugins extend the functionality of Meerschaum. Data Plugins \u00b6 Fetch Plugins \u00b6 Fetch plugins are the most straightforward: they pull data from some data source and return a dictionary or Pandas DataFrame. For example, one common use-case for a fetch plugin is to parse JSON data from a web API. The purpose of fetch plugins is to retrieve and parse data, then hand it off to Meerschaum for syncing. In case you're thinking of writing your own plugin, I recommend getting started with fetch plugins, as they're the simplest way to getting your data into Meerschaum for analysis. Check out Writing Plugins below for an in-depth walkthrough. Sync Plugins \u00b6 Like fetch plugins, sync plugins define how to get and parse data. Sync plugins, however, override the built-in sync process and give you complete control over the syncing process. For example, you could get really fancy with multiprocessing, distributed computing, or creating additional pipes. Ultimately, the goal of sync and fetch plugins is the same: retrieving data from an external source and handing it off to Meerschaum. Action Plugins \u00b6 Action plugins add additional actions to Meerschaum, such as built-in actions like sync , bootstrap , and show . The sky is the limit for actions \u2015 the action function serves as an entry point from mrsm . For example, the testing plugin provides the test action, which is the command to execute Meerschaum's pytest tests. An action plugin can provide multiple actions, and because plugins are loaded last, there is potential for overwriting built-in actions and greatly extending Meerschaum. Actions are a blank slate, and I'm really excited to see the creativity the community comes up with!","title":"Types of Plugins"},{"location":"plugins/types-of-plugins/#types-of-plugins","text":"Meerschaum plugins either provide data or do actions . Data plugins retrieve and parse data, then pass it on to Meerschaum for later analysis. There are two types of data plugins: fetch and sync plugins. Action plugins extend the functionality of Meerschaum.","title":"Types of Plugins"},{"location":"plugins/types-of-plugins/#data-plugins","text":"","title":"Data Plugins"},{"location":"plugins/types-of-plugins/#fetch-plugins","text":"Fetch plugins are the most straightforward: they pull data from some data source and return a dictionary or Pandas DataFrame. For example, one common use-case for a fetch plugin is to parse JSON data from a web API. The purpose of fetch plugins is to retrieve and parse data, then hand it off to Meerschaum for syncing. In case you're thinking of writing your own plugin, I recommend getting started with fetch plugins, as they're the simplest way to getting your data into Meerschaum for analysis. Check out Writing Plugins below for an in-depth walkthrough.","title":"Fetch Plugins"},{"location":"plugins/types-of-plugins/#sync-plugins","text":"Like fetch plugins, sync plugins define how to get and parse data. Sync plugins, however, override the built-in sync process and give you complete control over the syncing process. For example, you could get really fancy with multiprocessing, distributed computing, or creating additional pipes. Ultimately, the goal of sync and fetch plugins is the same: retrieving data from an external source and handing it off to Meerschaum.","title":"Sync Plugins"},{"location":"plugins/types-of-plugins/#action-plugins","text":"Action plugins add additional actions to Meerschaum, such as built-in actions like sync , bootstrap , and show . The sky is the limit for actions \u2015 the action function serves as an entry point from mrsm . For example, the testing plugin provides the test action, which is the command to execute Meerschaum's pytest tests. An action plugin can provide multiple actions, and because plugins are loaded last, there is potential for overwriting built-in actions and greatly extending Meerschaum. Actions are a blank slate, and I'm really excited to see the creativity the community comes up with!","title":"Action Plugins"},{"location":"plugins/plugin-development/","text":"","title":"Index"},{"location":"plugins/plugin-development/writing-plugins/","text":"Writing Your Own Plugins \u00b6 Meerschaum's plugin system is designed to be simple so you can get your plugins working quickly. Plugins are Python packages defined in the Meerschaum configuration plugins directory and are imported at startup into meerschaum.actions.plugins . Performance Warning To get the best performance and user experience, try to keep module-level code to a minimum \u2015 especially imports. Plugins are loaded at startup, and those tiny delays add up! 1 2 3 4 ### BAD - DON'T DO THIS import pandas as pd def fetch ( pipe , ** kw ): return None 1 2 3 4 ### GOOD - DO THIS INSTEAD def fetch ( pipe , ** kw ): import pandas as pd return None To create your plugin, follow these steps: Navigate to the Meerschaum plugins directory. Linux / Mac OS 1 ~/.config/meerschaum/plugins/ Windows 1 %AppData%\\Meerschaum\\plugins\\ Create your package file. You may either create a <plugin_name>.py file or <plugin_name>/__init__.py directory and file (in case your plugin needs sub-modules). (Optional) Define your plugin's __version__ string. Info You must increment your __version__ to publish changes to a repository. You may omit __version__ for the initial release, but subsequent releases need the version defined. 1 __version__ = '0.0.1' (Optional) Define your required dependencies. Your plugin will be run from a virtual environment and therefore may not be able to import packages that aren't declared. 1 required = [ 'rich>=9.8.0' , 'pandas' ] Write your functions. Special functions are fetch () , sync () , and < package_name > () , and you can use the @make_action decorator to designate additional functions as actions. Below is more information on these functions. Info You must include a **keywords argument to capture optional arguments. You may find the supplied arguments useful for your implementation (e.g. begin and end datetime . datetime objects). For fetch and sync plugins, you need a pipe positional argument for the meerschaum . Pipe object being synced. Writing Fetch Plugins \u00b6 Difficulty: Easy If your data source isn't very complicated, you can leverage Meerschaum's built-in syncing functionality by writing a fetch plugin . You might want to write a fetch plugin for the following reasons: Your source consists of a single stream of data. You are parsing your own data files. You don't want to sync pipes yourself. Tip Just like when writing sync plugins , there are additional keyword arguments available that you might find useful. Go ahead and inspect **kw and see if anything is helpful (e.g. begin , end , blocking , etc.). Check out Plugin Keyword Arguments for further information. Fetch Plugin Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 __version__ = '0.0.1' required = [ 'requests' , 'pandas' ] def fetch ( pipe , ** kw ): ### Define columns if undefined. if pipe . columns is None : pipe . columns = { 'datetime' : 'dt_col' } pipe . edit ( interactive = False ) ### Do something here to build a dictionary of lists or DataFrame import pandas as pd import requests url = \"https://api.example.com/json\" try : df = pd . read_json ( requests . get ( url ) . text ) except : df = None return df Writing Sync Plugins \u00b6 Difficulty: Medium Sometimes Meerschaum's built-in syncing process isn't enough for your needs. You can override the syncing process with your own sync () method. Sync plugins have much more freedom than fetch plugins, so what you come up with may differ from the following example. In any case, below is a simple sync () plugin. Note The only required argument is the positional pipe argument. The following example demonstrates one use of the begin and end arguments. Check out Plugin Keyword Arguments for further information. Sync Plugin Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 from __future__ import annotations from typing import Tuple , Any , Optional , Mapping __version__ = '0.0.1' required = [ 'requests' , 'pandas' ] def sync ( pipe : meerschaum . Pipe , begin : Optional [ datetime . datetime ] = None , end : Optional [ datetime . datetime ] = None , params : Mapping [ str , Any ] = None , ** kw : Any ) -> Tuple [ bool , str ]: \"\"\" An example `sync` plugin. Returns a tuple of (success, message) [bool, str]. :param pipe: The pipe to be synced. :param begin: The datetime to start searching for data (specified with `--begin`). Defaults to None. :param end: The datetime to stop searching for data (specified with `--end`). Defaults to None. :param kw: Additional keyword arguments you might find useful. \"\"\" ### Get data from somewhere. You decide how! import pandas as pd import requests url = \"https://api.example.com/json\" params = {} if params is None else params if begin is not None : params [ 'begin' ] = begin . isoformat () if end is not None : params [ 'end' ] = end . isoformat () try : df = pd . read_json ( requests . get ( url , params = params ) . text ) except : df = None if df is None : return False , f \"Failed to sync data from { url } with params: { params } \" return pipe . sync ( df ) Writing Action Plugins \u00b6 Your plugin may Plugin Keyword Arguments \u00b6 TODO","title":"Writing Your Own Plugins"},{"location":"plugins/plugin-development/writing-plugins/#writing-your-own-plugins","text":"Meerschaum's plugin system is designed to be simple so you can get your plugins working quickly. Plugins are Python packages defined in the Meerschaum configuration plugins directory and are imported at startup into meerschaum.actions.plugins . Performance Warning To get the best performance and user experience, try to keep module-level code to a minimum \u2015 especially imports. Plugins are loaded at startup, and those tiny delays add up! 1 2 3 4 ### BAD - DON'T DO THIS import pandas as pd def fetch ( pipe , ** kw ): return None 1 2 3 4 ### GOOD - DO THIS INSTEAD def fetch ( pipe , ** kw ): import pandas as pd return None To create your plugin, follow these steps: Navigate to the Meerschaum plugins directory. Linux / Mac OS 1 ~/.config/meerschaum/plugins/ Windows 1 %AppData%\\Meerschaum\\plugins\\ Create your package file. You may either create a <plugin_name>.py file or <plugin_name>/__init__.py directory and file (in case your plugin needs sub-modules). (Optional) Define your plugin's __version__ string. Info You must increment your __version__ to publish changes to a repository. You may omit __version__ for the initial release, but subsequent releases need the version defined. 1 __version__ = '0.0.1' (Optional) Define your required dependencies. Your plugin will be run from a virtual environment and therefore may not be able to import packages that aren't declared. 1 required = [ 'rich>=9.8.0' , 'pandas' ] Write your functions. Special functions are fetch () , sync () , and < package_name > () , and you can use the @make_action decorator to designate additional functions as actions. Below is more information on these functions. Info You must include a **keywords argument to capture optional arguments. You may find the supplied arguments useful for your implementation (e.g. begin and end datetime . datetime objects). For fetch and sync plugins, you need a pipe positional argument for the meerschaum . Pipe object being synced.","title":"Writing Your Own Plugins"},{"location":"plugins/plugin-development/writing-plugins/#writing-fetch-plugins","text":"Difficulty: Easy If your data source isn't very complicated, you can leverage Meerschaum's built-in syncing functionality by writing a fetch plugin . You might want to write a fetch plugin for the following reasons: Your source consists of a single stream of data. You are parsing your own data files. You don't want to sync pipes yourself. Tip Just like when writing sync plugins , there are additional keyword arguments available that you might find useful. Go ahead and inspect **kw and see if anything is helpful (e.g. begin , end , blocking , etc.). Check out Plugin Keyword Arguments for further information. Fetch Plugin Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 __version__ = '0.0.1' required = [ 'requests' , 'pandas' ] def fetch ( pipe , ** kw ): ### Define columns if undefined. if pipe . columns is None : pipe . columns = { 'datetime' : 'dt_col' } pipe . edit ( interactive = False ) ### Do something here to build a dictionary of lists or DataFrame import pandas as pd import requests url = \"https://api.example.com/json\" try : df = pd . read_json ( requests . get ( url ) . text ) except : df = None return df","title":"Writing Fetch Plugins"},{"location":"plugins/plugin-development/writing-plugins/#writing-sync-plugins","text":"Difficulty: Medium Sometimes Meerschaum's built-in syncing process isn't enough for your needs. You can override the syncing process with your own sync () method. Sync plugins have much more freedom than fetch plugins, so what you come up with may differ from the following example. In any case, below is a simple sync () plugin. Note The only required argument is the positional pipe argument. The following example demonstrates one use of the begin and end arguments. Check out Plugin Keyword Arguments for further information. Sync Plugin Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 from __future__ import annotations from typing import Tuple , Any , Optional , Mapping __version__ = '0.0.1' required = [ 'requests' , 'pandas' ] def sync ( pipe : meerschaum . Pipe , begin : Optional [ datetime . datetime ] = None , end : Optional [ datetime . datetime ] = None , params : Mapping [ str , Any ] = None , ** kw : Any ) -> Tuple [ bool , str ]: \"\"\" An example `sync` plugin. Returns a tuple of (success, message) [bool, str]. :param pipe: The pipe to be synced. :param begin: The datetime to start searching for data (specified with `--begin`). Defaults to None. :param end: The datetime to stop searching for data (specified with `--end`). Defaults to None. :param kw: Additional keyword arguments you might find useful. \"\"\" ### Get data from somewhere. You decide how! import pandas as pd import requests url = \"https://api.example.com/json\" params = {} if params is None else params if begin is not None : params [ 'begin' ] = begin . isoformat () if end is not None : params [ 'end' ] = end . isoformat () try : df = pd . read_json ( requests . get ( url , params = params ) . text ) except : df = None if df is None : return False , f \"Failed to sync data from { url } with params: { params } \" return pipe . sync ( df )","title":"Writing Sync Plugins"},{"location":"plugins/plugin-development/writing-plugins/#writing-action-plugins","text":"Your plugin may","title":"Writing Action Plugins"},{"location":"plugins/plugin-development/writing-plugins/#plugin-keyword-arguments","text":"TODO","title":"Plugin Keyword Arguments"},{"location":"usage/connectors/","text":"","title":"Connectors"}]}